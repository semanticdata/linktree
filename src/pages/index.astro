---
import Card from "../components/Card.astro";
import Link from "../components/Link.astro";

import "../style.css";
import "@fortawesome/fontawesome-svg-core/styles.css";

// Import font CSS but don't use the import for loading (we'll preload it)
import "@fontsource-variable/inter";

import {
  cards,
  links,
  name,
  subtitle,
  footer,
  description,
} from "../siteConfig";

// Disable Font Awesome auto-adding CSS
import { config } from "@fortawesome/fontawesome-svg-core";
config.autoAddCss = false;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta name="author" content={name} />
    <title>{name} - Linktree</title>

    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin />

    Ruleset ignored due to bad selector.

    <!-- Preload Font Awesome to improve performance -->
    <link
      rel="preload"
      href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-svg-core@latest/styles.css"
      as="style"
    />

    <!-- Load Font Awesome asynchronously -->
    <script is:inline defer>
      // Load Font Awesome icons asynchronously to avoid blocking rendering
      window.addEventListener("DOMContentLoaded", async () => {
        const { library, dom } = await import(
          "@fortawesome/fontawesome-svg-core"
        );
        const { fas } = await import("@fortawesome/free-solid-svg-icons");
        const { fab } = await import("@fortawesome/free-brands-svg-icons");
        library.add(fas, fab);
        dom.watch();
      });
    </script>

    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Inline critical styles to eliminate render-blocking CSS */
      /* Use system fonts as fallback to prevent render delay */

      :root {
        --background-gradient-start: #ffffff;
        --background-gradient-end: #e9ecef;
        --text-color: #212529;
        --title-size: 2.25rem;
        --title-size-wide: 3.75rem;
      }

      body {
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 100vw;
        min-height: 100vh;
        background-color: var(
          --background-gradient-start
        ); /* Immediate color */
        color: var(--text-color);
        margin: 0;
        font-family:
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          Roboto,
          "Inter Variable",
          sans-serif;
        text-rendering: optimizeSpeed; /* Optimize for speed over quality */
        -webkit-font-smoothing: antialiased;
      }

      main {
        width: 90%;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        justify-content: center;
        align-items: center;
      }

      .title {
        font-size: var(--title-size);
        font-weight: 900;
        text-align: center;
        margin-block-end: 0;
        will-change: transform;
        transform: translateZ(0);
        font-family:
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          Roboto,
          "Inter Variable",
          sans-serif;
        content-visibility: auto;
        contain: layout style paint;
        contain-intrinsic-size: 1em;
      }

      @media (min-width: 768px) {
        .title {
          font-size: var(--title-size-wide);
        }
      }
    </style>
  </head><body class="body-custom">
    <main class="main-custom">
      <h1 class="title">{name}</h1>
      <p class="subtitle">{subtitle}</p>
      <div class="card-grid">
        {
          cards.map(({ name: cardName, link, icon }) => {
            return <Card name={cardName} link={link} icon={icon} />;
          })
        }
      </div>
      <div class="link-grid">
        {
          links.map(({ link, icon }) => {
            return <Link {link} {icon} />;
          })
        }
      </div>
      <p class="footer-text">{footer}</p>
    </main>
    <!-- Font Awesome script moved to head with defer -->
  </body>
</html>
