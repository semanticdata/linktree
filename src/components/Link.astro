---
/**
 * Determines if a string is an email address
 * @private
 */
function isEmail(str: string): boolean {
  return (
    str.includes("@") && !str.startsWith("http") && !str.startsWith("mailto:")
  );
}

/**
 * Normalizes a URL by adding https:// if no protocol is specified
 * and handles mailto: links appropriately
 * @private
 */
function normalizeUrl(url: string): string {
  if (url.startsWith("mailto:")) {
    return url;
  }
  if (isEmail(url)) {
    return `mailto:${url}`;
  }
  if (url.startsWith("http://") || url.startsWith("https://")) {
    return url;
  }
  return `https://${url}`;
}

/**
 * Link component that renders an icon link with proper accessibility attributes
 * @example
 * <Link link="https://github.com" icon="fa-brands fa-github" />
 * <Link link="mailto:example@example.com" icon="fa-regular fa-envelope" />
 */
interface Props {
  /** The URL or email address to link to */
  link: string;
  /** Font Awesome icon class(es) */
  icon: string;
}

const { link, icon } = Astro.props as Props;
const href = normalizeUrl(link);
const isExternalLink = !href.startsWith("mailto:");
---

<!-- 
  Interactive icon link that handles both external URLs and email links
  @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a
-->
<a
  class="link-component"
  aria-label={isExternalLink
    ? `Open ${link} in a new tab`
    : `Email ${link.replace("mailto:", "")}`}
  target={isExternalLink ? "_blank" : undefined}
  rel={isExternalLink ? "noopener noreferrer" : undefined}
  href={href}
  data-testid={isExternalLink ? "external-link" : "email-link"}
>
  <i class={icon} aria-hidden="true"></i>
</a>
